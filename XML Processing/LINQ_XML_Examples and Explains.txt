// Console.WriteLine(doc.Root.Value);
// Retrieves the concatenated text values of all descendant nodes of the root element.
// Example Output (assuming XML with books):
// Professional C# and .NET Christian Nagel 978-0-470-50225-9 
// Teach Yourself XML in 10 Minutes Andrew H. Watt 978-0-672-32471-0

Console.WriteLine(doc.Root.Descendants().First().Elements().First().Value);
// Retrieves the text value of the first child element of the first descendant.
// Example Output: Professional C# and .NET (from <title> element of the first <book>)



Console.WriteLine(doc.Root.Descendants().First().Element("author").Value);
// Looks for a direct child element of the first descendant with the tag name <author>.
// Example Output: Christian Nagel (from <author> element of the first <book>)



// doc.Root.Descendants().First().SetElementValue("issueDate", "2024-07-25");
// Adds or updates a child element named <issueDate> for the first descendant of the root element.
// If <issueDate> already exists, its value is updated to "2024-07-25".
// If it does not exist, a new <issueDate> element is created with the specified value.
// Example Result in XML:
// <book>
//     <title>Professional C# and .NET</title>
//     <author>Christian Nagel</author>
//     <isbn>978-0-470-50225-9</isbn>
//     <issueDate>2024-07-25</issueDate> <!-- New or updated element -->
// </book>

doc.Save("test.xml");
// Saves the modified XML document to a file named "test.xml" in the current working directory.



doc.Root
    .Descendants()
    .First()
    .SetAttributeValue("issueDate", "2024-07-25");
// Adds or updates an attribute named "issueDate" for the first descendant of the root element.
// Example Result in XML:
// <book issueDate="2024-07-25">
//     <title>Professional C# and .NET</title>
//     <author>Christian Nagel</author>
//     <isbn>978-0-470-50225-9</isbn>
// </book>

Use Case:
Use SetAttributeValue for metadata or properties of an element, like dates, IDs, or flags, that donâ€™t require complex child elements.



XDocument doc2 = new XDocument(); // create new XML document

doc2.Add(
    new XElement("class", // Creates a new root element <class>.
        new XElement("student", // Adds a child <student> element under <class>.
            new XElement("name", "Stamo"), // Adds a <name> element with the value "Stamo" inside the <student>.
            new XAttribute("course", "C#") // Adds an attribute course="C#" to the <student>.
        ),
        new XElement("student", // Adds another <student> element under <class>.
            new XElement("name", "Pesho"), // Adds a <name> element with the value "Pesho" inside this <student>.
            new XAttribute("course", "C++") // Adds an attribute course="C++" to this <student>.
        )
    )
);

doc2.Save("student.xml"); // Saves the constructed XML structure to a file named "student.xml" in the current working directory.