A partial class in C# allows a class to be divided into multiple files. This feature is primarily useful for organizing large classes or for situations where the code for a class is generated by tools but still needs to be supplemented with additional functionality. The partial keyword is used to indicate that the class definition is split across multiple files.

Key Points:
Definition: All parts of a partial class must have the partial keyword and the same name.
Same Namespace: All parts of the partial class must be in the same namespace.
Combined at Compile Time: During compilation, the compiler combines all parts of the partial class into a single entity.

Common Use Cases:
Code Generation: For example, Visual Studio uses partial classes for automatically generated code files (e.g., .designer.cs in Windows Forms or WPF).
Improved Organization: Developers can split a large class into smaller, logically grouped files for better readability and maintenance.

Example:

File 1 (Person.Part1.cs):


public partial class Person
{
    public string FirstName { get; set; }
    public string LastName { get; set; }
}

File 2 (Person.Part2.cs):


public partial class Person
{
    public void PrintFullName()
    {
        Console.WriteLine($"{FirstName} {LastName}");
    }
}

When compiled, these two parts are merged into one:


public class Person
{
    public string FirstName { get; set; }
    public string LastName { get; set; }

    public void PrintFullName()
    {
        Console.WriteLine($"{FirstName} {LastName}");
    }
}

Benefits:
Collaboration: Multiple developers can work on different parts of the same class simultaneously.
Separation of Concerns: Group related methods and properties into separate files for clarity.
Code Organization: Helps to manage large classes or auto-generated code.

Limitations:
All Partial Definitions Must Be in the Same Assembly: You cannot define parts of a partial class in separate assemblies.

Cannot Split Across Namespaces: All parts must belong to the same namespace.